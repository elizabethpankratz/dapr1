[
  {
    "objectID": "1_01_design_and_data.html",
    "href": "1_01_design_and_data.html",
    "title": "Research design & data",
    "section": "",
    "text": "Caution: Did you register for RStudio Server Online?\n\n\n\n\n\n\n\nA. Yes\nB. No\nNo, and B didn’t work\n\n\n\n\nLogin to EASE using your university UUN and password.\nAccess the server from https://rstudio.ppls.ed.ac.uk using your university UUN and RStudio password.\n\n\n\nTry these steps first to register for RStudio server online:\n\nLog in to EASE using your university UUN and password.\nSet your RStudio password here, the username will be the same as your UUN (make sure you type your UUN correctly).\nAccess the server from https://rstudio.ppls.ed.ac.uk using your university UUN and the password you set above in (2).\n\n\n\n\nPlease complete this form and wait for an email. Please note that this can take up to four working days.\n\nOnce you receive an email from us, please follow the following instructions:\n\nSet your here, the username will be the same as your UUN (make sure you type your UUN correctly).\nAccess the server from https://rstudio.ppls.ed.ac.uk using your university UUN and the password you just set above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip: Lab instructions\n\n\n\n\n\n\nPlease work through the lab exercises in small groups.\nYou will be given some data that you will use throughout the next 5 weeks.\n\nIn week 5, you will be asked to submit your PDF report, for which you will receive formative feedback in week 6.\nAs a group, you have to produce a data analysis PDF report on those data.\n\nOne person is the driver, responsible for typing on the PC, and the rest are navigators and cannot type. Navigators are responsible for commenting on the strategy, code, and spotting typos or fixing errors. You will rotate each lab so that everyone experiences being a driver.\nDriver: open an Rmd file, and start writing your work there.\n\nNavigators: be alert and start providing suggestions and comments on the strategy and code.\n\n\n\n\n\n\n\n\n\n\nTip: Lab help and support\n\n\n\n\n\nThe lab is structured to provide various levels of support. When attending the labs, you should directly attempt and work on the tasks. However, if you are unsure or stuck at any point, you can make use of the following help:\n\nSimply raise your hand and get help from a tutor\nHover your mouse on the superscript number to get a hint. The hints may sometimes show multiple equivalent ways of getting an answer - you just need one way\nScroll down to the Worked Example section, where you can read through a worked example.\n\n\n\n\n\n\n\n\n\n\nImportant: Install tinytex\n\n\n\nBefore you begin, make sure you have tinytex installed in R so that you can “Knit” your Rmd document to a PDF file:\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()"
  },
  {
    "objectID": "1_01_design_and_data.html#formative-report-a",
    "href": "1_01_design_and_data.html#formative-report-a",
    "title": "Research design & data",
    "section": "\n2 Formative report A",
    "text": "2 Formative report A\nIn the first five weeks of the course you should produce a PDF report using Rmarkdown for which you will receive formative feedback in week 6. The report should not include any reference to R code or functions, but be written or a generic reader who is only assumed to have a basic statistical understanding without any R knowledge. You should also avoid any R code output or printout in the PDF file.\n\n\n\n\n\n\nHiding R code or ouput\n\n\n\n\n\n\n\nHiding R code\nHiding R output\nHiding R code and output\n\n\n\nTo not show the code of an R code chunk, and only show the output, write:\n```{r, echo=FALSE}\n# code goes here\n```\n\n\nTo show the code of an R code chunk, but hide the output, write:\n```{r, results='hide'}\n# code goes here\n```\n\n\nTo hide both code and output of an R code chunk, write:\n```{r, include=FALSE}\n# code goes here\n```\n\n\n\n\n\n\n\n2.1 Data\nHollywood Movies. At the link https://uoepsy.github.io/data/hollywood_movies_subset.csv you will find data on Hollywood movies released between 2012 and 2018 from the top 5 lead studios and top 10 genres. The following variables were recorded:\n\n\nMovie: Title of the movie\n\nLeadStudio: Primary U.S. distributor of the movie\n\nRottenTomatoes: Rotten Tomatoes rating (critics)\n\nAudienceScore: Audience rating (via Rotten Tomatoes)\n\nGenre: One of Action Adventure, Black Comedy, Comedy, Concert, Documentary, Drama, Horror, Musical, Romantic Comedy, Thriller, or Western\n\nTheatersOpenWeek: Number of screens for opening weekend\n\nOpeningWeekend: Opening weekend gross (in millions)\n\nBOAvgOpenWeekend: Average box office income per theater, opening weekend\n\nBudget: Production budget (in millions)\n\nDomesticGross: Gross income for domestic (U.S.) viewers (in millions)\n\nWorldGross: Gross income for all viewers (in millions)\n\nForeignGross: Gross income for foreign viewers (in millions)\n\nProfitability: WorldGross as a percentage of Budget\n\nOpenProfit: Percentage of budget recovered on opening weekend\n\nYear: Year the movie was released\n\nIQ1-IQ50: IQ score of each of 50 audience raters\n\nSnacks: How many of the 50 audience raters brought snacks\n\nPrivateTransport: How many of the 50 audience raters reached the cinema via private transportation\n\n2.2 Tasks\nFor formative report A, you will be asked to perform the following tasks, each related to a week of teaching in this course:\n\n\n\n\n\n\nNote: This week’s task\n\n\n\nA1) Read the data into R and inspect it\n\n\nA2) Display and describe the categorical data\nA3) Display and describe the numerical data\nA4) Display and describe a relationship of interest between two or three variables of your choice A5) Finish the report write-up, knit to PDF, and submit the PDF for formative feedback\nThis week you will only focus on task A1. Below there are some guided sub-steps you may want to consider to complete task A1.\n\n2.3 A1 sub-tasks\n\n\n\n\n\n\nTo see the hints, hover your cursor on the superscript numbers.\n\n\n\n\nRead the movie data into R, and give it a useful name. Inspect the data by looking at the data in RStudio. You don’t need to show the data in the report, a description in words is sufficient.1\nHow many observations are there?2\nHow many variables are there?3\nWhat is the type of each variable?4\n\n\n\n\n\n\n\nThink about it\n\n\n\n\n\n\nWhat does dim(DATA) return?\nWhat is the function of appending a [1] or [2]?\n\n\n\n\n\nWhat’s the minimum and maximum budget in the sample? What about the average Rotten Tomatoes rating?5\nDo you notice any issues when computing the minimum and maximum Budget and the average RottenTomatoes rating?6"
  },
  {
    "objectID": "1_01_design_and_data.html#worked-example",
    "href": "1_01_design_and_data.html#worked-example",
    "title": "Research design & data",
    "section": "\n3 Worked example",
    "text": "3 Worked example\nConsider the dataset available at https://uoepsy.github.io/data/RestaurantTips.csv, containing 157 observations on the following 7 variables:\n\n\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\nBill\nSize of the bill (in dollars)\n\n\nTip\nSize of the tip (in dollars)\n\n\nCredit\nPaid with a credit card? n or y\n\n\nGuests\nNumber of people in the group\n\n\nDay\nDay of the week: m=Monday, t=Tuesday, w=Wednesday, th=Thursday, or f=Friday\n\n\nServer\nCode for specific waiter/waitress: A, B, or C\n\n\nPctTip\nTip as a percentage of the bill\n\n\n\n\n\nThese data were collected by the owner of a bistro in the US, who was interested in understanding the tipping patterns of their customers. The data are adapted from Lock et al. (2020).\n\nlibrary(tidyverse)  # we use read_csv and glimpse from tidyverse\n\n\ntips <- read_csv(\"https://uoepsy.github.io/data/RestaurantTips.csv\")\nhead(tips)\n\n# A tibble: 6 × 7\n   Bill   Tip Credit Guests Day   Server PctTip\n  <dbl> <dbl> <chr>   <dbl> <chr> <chr>   <dbl>\n1  23.7 10    n           2 f     A        42.2\n2  36.1  7    n           3 f     B        19.4\n3  32.0  5.01 y           2 f     A        15.7\n4  17.4  3.61 y           2 f     B        20.8\n5  15.4  3    n           2 f     B        19.5\n6  18.6  2.5  n           2 f     A        13.4\n\n\n\n\nhead() shows by default the top 6 rows of the data. Use the n = ... option to change the default behaviour, e.g. head(<data>, n = 10).\n\ndim(tips)\n\n[1] 157   7\n\n\n\n\nThis returns the number of rows and columns\n\nglimpse(tips)\n\nRows: 157\nColumns: 7\n$ Bill   <dbl> 23.70, 36.11, 31.99, 17.39, 15.41, 18.62, 21.56, 19.58, 23.59, …\n$ Tip    <dbl> 10.00, 7.00, 5.01, 3.61, 3.00, 2.50, 3.44, 2.42, 3.00, 2.00, 1.…\n$ Credit <chr> \"n\", \"n\", \"y\", \"y\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\"…\n$ Guests <dbl> 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 2, 1, 5, 5, …\n$ Day    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"…\n$ Server <chr> \"A\", \"B\", \"A\", \"B\", \"B\", \"A\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\", \"B\"…\n$ PctTip <dbl> 42.2, 19.4, 15.7, 20.8, 19.5, 13.4, 16.0, 12.4, 12.7, 10.7, 11.…\n\n\n\n\nglimpse is part of the tidyverse package\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nAlternatives to glimpse are the data “structure” function:\n\nstr(tips)\n\nspec_tbl_df [157 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Bill  : num [1:157] 23.7 36.1 32 17.4 15.4 ...\n $ Tip   : num [1:157] 10 7 5.01 3.61 3 2.5 3.44 2.42 3 2 ...\n $ Credit: chr [1:157] \"n\" \"n\" \"y\" \"y\" ...\n $ Guests: num [1:157] 2 3 2 2 2 2 2 2 2 2 ...\n $ Day   : chr [1:157] \"f\" \"f\" \"f\" \"f\" ...\n $ Server: chr [1:157] \"A\" \"B\" \"A\" \"B\" ...\n $ PctTip: num [1:157] 42.2 19.4 15.7 20.8 19.5 13.4 16 12.4 12.7 10.7 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Bill = col_double(),\n  ..   Tip = col_double(),\n  ..   Credit = col_character(),\n  ..   Guests = col_double(),\n  ..   Day = col_character(),\n  ..   Server = col_character(),\n  ..   PctTip = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nor:\n\nsapply(tips, data.class)\n\n       Bill         Tip      Credit      Guests         Day      Server \n  \"numeric\"   \"numeric\" \"character\"   \"numeric\" \"character\" \"character\" \n     PctTip \n  \"numeric\" \n\n\n\n\n\n\n\n\n\n\n\nExample writeup\n\n\n\nThe data contains measurements for a total of 157 parties on four numeric variables: size of the bill (in dollars), size of the tip, number of guests in the group, and tip as a percentage of the bill total. The data also includes three categorical variables indicating whether or not the party paid with a credit card, the day of the week, as well as a server-specific identifier.\n\n\n\nsummary(tips)\n\n      Bill            Tip            Credit              Guests     \n Min.   : 1.66   Min.   : 0.250   Length:157         Min.   :1.000  \n 1st Qu.:15.19   1st Qu.: 2.075   Class :character   1st Qu.:2.000  \n Median :20.22   Median : 3.340   Mode  :character   Median :2.000  \n Mean   :22.73   Mean   : 3.807                      Mean   :2.096  \n 3rd Qu.:28.84   3rd Qu.: 5.000                      3rd Qu.:2.000  \n Max.   :70.51   Max.   :15.000                      Max.   :7.000  \n                 NA's   :1                                          \n     Day               Server              PctTip      \n Length:157         Length:157         Min.   :  6.70  \n Class :character   Class :character   1st Qu.: 14.30  \n Mode  :character   Mode  :character   Median : 16.20  \n                                       Mean   : 17.89  \n                                       3rd Qu.: 18.20  \n                                       Max.   :221.00  \n                                                       \n\n\n\n\nsummary returns a quick summary of the data.\nYou probably won’t understand some parts of the output above, but we will learn more in the coming weeks, so don’t worry too much about it. For the moment, you should be able to understand the minimum, maximum, and the mean.\nCurrently, it is not showing very informative output for the categorical variables.\nWe can replace each factor level with a clearer label:\n\ntips$Day <- factor(tips$Day, \n                   levels = c(\"m\", \"t\", \"w\", \"th\", \"f\"),\n                   labels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"))\n\ntips$Credit <- factor(tips$Credit, \n                      levels = c(\"n\", \"y\"),\n                      labels = c(\"No\", \"Yes\"))\n\ntips$Server <- factor(tips$Server)\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nUsing tidyverse, the function mutate is used to mutate a variable (column) in the data:\n\ntips <- tips %>%\n    mutate(\n        Day = factor(Day,\n                     levels = c(\"m\", \"t\", \"w\", \"th\", \"f\"),\n                     labels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")),\n        Credit = factor(Credit,\n                        levels = c(\"n\", \"y\"),\n                        labels = c(\"No\", \"Yes\")),\n        Server = factor(Server)\n    )\n\nThe functions %>% and mutate are part of the tidyverse package. The former, %>%, is called pipe.\nThe pipe works by taking what’s on the left and passing it to the operation on the right. For example, rounding to 2 decimal places the logarithm of the whole numbers from 1 to 10:\n\nround(log(1:10), digits = 2)\n\n [1] 0.00 0.69 1.10 1.39 1.61 1.79 1.95 2.08 2.20 2.30\n\n\nis equivalent to:\n\n1:10 %>%\n    log() %>%\n    round(digits = 2)\n\n [1] 0.00 0.69 1.10 1.39 1.61 1.79 1.95 2.08 2.20 2.30\n\n\n\n\n\nLet’s check the result of the changes to the variable types:\n\nglimpse(tips)\n\nRows: 157\nColumns: 7\n$ Bill   <dbl> 23.70, 36.11, 31.99, 17.39, 15.41, 18.62, 21.56, 19.58, 23.59, …\n$ Tip    <dbl> 10.00, 7.00, 5.01, 3.61, 3.00, 2.50, 3.44, 2.42, 3.00, 2.00, 1.…\n$ Credit <fct> No, No, Yes, Yes, No, No, No, No, No, No, No, No, No, No, No, N…\n$ Guests <dbl> 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 2, 1, 5, 5, …\n$ Day    <fct> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Friday,…\n$ Server <fct> A, B, A, B, B, A, B, A, A, B, B, A, B, B, B, B, C, C, C, C, C, …\n$ PctTip <dbl> 42.2, 19.4, 15.7, 20.8, 19.5, 13.4, 16.0, 12.4, 12.7, 10.7, 11.…\n\n\n\nsummary(tips)\n\n      Bill            Tip         Credit        Guests             Day    \n Min.   : 1.66   Min.   : 0.250   No :106   Min.   :1.000   Monday   :20  \n 1st Qu.:15.19   1st Qu.: 2.075   Yes: 51   1st Qu.:2.000   Tuesday  :13  \n Median :20.22   Median : 3.340             Median :2.000   Wednesday:62  \n Mean   :22.73   Mean   : 3.807             Mean   :2.096   Thursday :36  \n 3rd Qu.:28.84   3rd Qu.: 5.000             3rd Qu.:2.000   Friday   :26  \n Max.   :70.51   Max.   :15.000             Max.   :7.000                 \n                 NA's   :1                                                \n Server     PctTip      \n A:60   Min.   :  6.70  \n B:65   1st Qu.: 14.30  \n C:32   Median : 16.20  \n        Mean   : 17.89  \n        3rd Qu.: 18.20  \n        Max.   :221.00  \n                        \n\n\n\n\nAfter making categorical variables factors, summary shows the count of each category for the categorical variables.\nThe percentage of total bill has a maximum value of 221, which seems very strange. Someone is very unlikely to tip more than their bill total. In this case 221% of their bill value seems unlikely.\nLet’s inspect the row where PctTip is greater than 100:\n\ntips[tips$PctTip > 100, ]\n\n# A tibble: 1 × 7\n   Bill   Tip Credit Guests Day      Server PctTip\n  <dbl> <dbl> <fct>   <dbl> <fct>    <fct>   <dbl>\n1  49.6    NA Yes         4 Thursday C         221\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nAlternatively, using tidyverse, the function filter is used to only filter the rows that satisfy a condition:\n\ntips %>% \n    filter(PctTip > 100)\n\n# A tibble: 1 × 7\n   Bill   Tip Credit Guests Day      Server PctTip\n  <dbl> <dbl> <fct>   <dbl> <fct>    <fct>   <dbl>\n1  49.6    NA Yes         4 Thursday C         221\n\n\n\n\n\nWith a bill of 49.59, the tip would be 109.59 dollars:\n\n49.59 * 221 / 100\n\n[1] 109.5939\n\n\nFurthermore, we also notice that the tipping amount is not available (NA). The corresponding value in the percentage of total tip seems likely an inputting error, perhaps due to double typing the leading 2 when recording the data. We will set that value to not available (NA) with the following code:\n\ntips$PctTip[tips$PctTip > 100] <- NA\n\n\n\na > b tests whether a is greater than b. a < b tests whether a is smaller than b. a == b tests whether a is equal to b; notice the double equal sign! You can also use >= or <=\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nAlternatively you can use tidyverse:\n\ntips <- tips %>%\n    mutate(\n        PctTip = ifelse(PctTip > 100, NA, PctTip)\n    )\n\nWhere the function ifelse selects a value depending on a condition to test: ifelse(test, value_if_true, value_if_false). In the case above, each value in the column PctTip is replaced by NA if Pct > 100, and it is kept the same otherwise.\n\n\n\n\nsummary(tips)\n\n      Bill            Tip         Credit        Guests             Day    \n Min.   : 1.66   Min.   : 0.250   No :106   Min.   :1.000   Monday   :20  \n 1st Qu.:15.19   1st Qu.: 2.075   Yes: 51   1st Qu.:2.000   Tuesday  :13  \n Median :20.22   Median : 3.340             Median :2.000   Wednesday:62  \n Mean   :22.73   Mean   : 3.807             Mean   :2.096   Thursday :36  \n 3rd Qu.:28.84   3rd Qu.: 5.000             3rd Qu.:2.000   Friday   :26  \n Max.   :70.51   Max.   :15.000             Max.   :7.000                 \n                 NA's   :1                                                \n Server     PctTip     \n A:60   Min.   : 6.70  \n B:65   1st Qu.:14.30  \n C:32   Median :16.15  \n        Mean   :16.59  \n        3rd Qu.:18.05  \n        Max.   :42.20  \n        NA's   :1      \n\n\n\n\n\n\n\n\nExample writeup\n\n\n\nThe average bill size was $22.73, and the average tip was $3.85, corresponding to roughly 17% of the total bill. Out of 157 parties, only 51 paid with a credit card. Most parties tended to be of around 2 people each, and people tended to go to that restaurant more often on Wednesday. Among the three servers, server C was the one that served the least number of parties. The data also included a missing tipping value, corresponding to a bill $49.59, and a data inputting error for the corresponding measure of the tip as a percentage of the total bill."
  },
  {
    "objectID": "1_01_design_and_data.html#student-glossary",
    "href": "1_01_design_and_data.html#student-glossary",
    "title": "Research design & data",
    "section": "\n4 Student Glossary",
    "text": "4 Student Glossary\nTo conclude the lab, create a glossary of R functions. You can do so by opening Microsoft Word, Excel, or OneNote and creating a table with two columns: one where you should write the name of an R function, and the other column where you should provide a brief description of what the function does.\nThis “do it yourself” glossary is an opportunity for you to revise what you have learned in today’s lab and write down a few take-home messages. You will find this glossary handy as a reference to keep next to you when you will be doing the assessed weekly quizzes.\nBelow you can find an example to get you started:\n\n\n\n\n\n\nFunction\nUse and Package\n\n\n\nread_csv\nFor reading comma separated value files. Part of tidyverse package\n\n\nView\n?\n\n\nhead\n?\n\n\nnrow\n?\n\n\nncol\n?\n\n\ndim\n?\n\n\nglimpse\n?\n\n\nstr\n?\n\n\nsummary\n?\n\n\nfactor\n?"
  },
  {
    "objectID": "1_02_categorical_data.html",
    "href": "1_02_categorical_data.html",
    "title": "Categorical data",
    "section": "",
    "text": "In the first five weeks of the course you should produce a PDF report using Rmarkdown for which you will receive formative feedback in week 6. Throughout those weeks, you will be working with a simulated dataset arising from a lexical decision task, adapted from Nordmann et al. (2022).\nThe report should not include any reference to R code or functions, but be written or a generic reader who is only assumed to have a basic statistical understanding without any R knowledge. You should also avoid any R code output or printout in the PDF file.\n\nLexical Decision Task. One hundred participants were asked to decide whether a presented word was a real word or a non-word. The data include 100 rows (one for each participant) and 7 variables:\n\n\n\n\nVariable Name\nDescription\n\n\n\nid\nParticipant ID\n\n\nage\nAge\n\n\nlanguage\nLanguage group (1 = monolingual, 2 = bilingual)\n\n\nrt_word\nReaction time (ms) for word trials\n\n\nrt_nonword\nReaction time (ms) for non-word trials\n\n\nacc_word\nAccuracy for word trials\n\n\nacc_nonword\nAccuracy for non-word trials\n\n\n\n\n\nYou can download the data from this link: https://uoepsy.github.io/data/ldt_data.csv.\n\nFor formative report A, you will be asked to perform the following tasks, each related to a week of teaching in this course:\nA1) Read the data into R and inspect it\n\n\n\n\n\n\nThis week’s task\n\n\n\nA2) Display and describe the categorical data\n\n\nA3) Display and describe the numerical data\nA4) Display and describe a relationship of interest between two or three variables of your choice\nThis week you will only focus on task A2. Below there are some guided sub-steps you may want to consider to complete task A2.\n\n\n\n\n\n\n\nNote\n\n\n\nTo see the hints, hover your cursor on the superscript numbers.\n\n\n\nReopen last week’s Rmd file, as we will continue and build on last week’s work.1\nCreate a plot displaying the language distribution in the sample.2\nDescribe the language distribution in the sample.3\nCreate a new column showing the frequencies as percentages. Do you notice anything different with the actual frequencies? Why?4\nWhat is the mode of the distribution?5"
  },
  {
    "objectID": "1_02_categorical_data.html#worked-example",
    "href": "1_02_categorical_data.html#worked-example",
    "title": "Categorical data",
    "section": "\n2 Worked example",
    "text": "2 Worked example\nConsider the dataset available at https://uoepsy.github.io/data/RestaurantTips.csv, containing 157 observations on the following 7 variables:\n\n\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\nBill\nSize of the bill (in dollars)\n\n\nTip\nSize of the tip (in dollars)\n\n\nCredit\nPaid with a credit card? n or y\n\n\nGuests\nNumber of people in the group\n\n\nDay\nDay of the week: m=Monday, t=Tuesday, w=Wednesday, th=Thursday, or f=Friday\n\n\nServer\nCode for specific waiter/waitress: A, B, or C\n\n\nPctTip\nTip as a percentage of the bill\n\n\n\n\n\nThese data were collected by the owner of a bistro in the US, who was interested in understanding the tipping patterns of their customers. The data are adapted from Lock et al. (2020).\n\nlibrary(tidyverse)  # we use read_csv and glimpse from tidyverse\ntips <- read_csv(\"https://uoepsy.github.io/data/RestaurantTips.csv\")\n\nglimpse(tips)\n\nRows: 157\nColumns: 7\n$ Bill   <dbl> 23.70, 36.11, 31.99, 17.39, 15.41, 18.62, 21.56, 19.58, 23.59, …\n$ Tip    <dbl> 10.00, 7.00, 5.01, 3.61, 3.00, 2.50, 3.44, 2.42, 3.00, 2.00, 1.…\n$ Credit <chr> \"n\", \"n\", \"y\", \"y\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\"…\n$ Guests <dbl> 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 2, 1, 5, 5, …\n$ Day    <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"…\n$ Server <chr> \"A\", \"B\", \"A\", \"B\", \"B\", \"A\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\", \"B\"…\n$ PctTip <dbl> 42.2, 19.4, 15.7, 20.8, 19.5, 13.4, 16.0, 12.4, 12.7, 10.7, 11.…\n\ntips$Day <- factor(tips$Day, \n                   levels = c(\"m\", \"t\", \"w\", \"th\", \"f\"),\n                   labels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"))\n\ntips$Credit <- factor(tips$Credit, \n                      levels = c(\"n\", \"y\"),\n                      labels = c(\"No\", \"Yes\"))\n\ntips$Server <- factor(tips$Server)\n\nglimpse(tips)\n\nRows: 157\nColumns: 7\n$ Bill   <dbl> 23.70, 36.11, 31.99, 17.39, 15.41, 18.62, 21.56, 19.58, 23.59, …\n$ Tip    <dbl> 10.00, 7.00, 5.01, 3.61, 3.00, 2.50, 3.44, 2.42, 3.00, 2.00, 1.…\n$ Credit <fct> No, No, Yes, Yes, No, No, No, No, No, No, No, No, No, No, No, N…\n$ Guests <dbl> 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 2, 1, 5, 5, …\n$ Day    <fct> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Friday,…\n$ Server <fct> A, B, A, B, B, A, B, A, A, B, B, A, B, B, B, B, C, C, C, C, C, …\n$ PctTip <dbl> 42.2, 19.4, 15.7, 20.8, 19.5, 13.4, 16.0, 12.4, 12.7, 10.7, 11.…\n\ntips <- tips %>%\n    mutate(\n        PctTip = ifelse(PctTip > 100, NA, PctTip)\n    )\n\n\nplt_credit <- ggplot(tips, aes(x = Credit)) +\n    geom_bar() +\n    labs(x = \"Paid by credit card?\")\nplt_credit\n\n\n\n\nYou can even flip the bars if you wished to:\n\nggplot(tips, aes(x = Credit)) +\n    geom_bar() +\n    labs(x = \"Paid by credit card?\") +\n    coord_flip()\n\n\n\n\nYou can use the patchwork package to place graphs side by side. Simply create an object for each graph, and concatenate the objects with | for horizontal concatenation and / for vertical concatenation of graphs.\n\n\n\n\n\n\nRotate x-axis labels\n\n\n\nTo rotate x-axis labels, you can use this code: theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\nDon’t worry, no one remembers it, and people always google “rotate x-axis labels ggplot” to find it.\n\n\n\nlibrary(patchwork)\n\nplt1 <- ggplot(tips, aes(x = Credit)) +\n    geom_bar() +\n    labs(x = \"Paird by credit card?\")\n\nplt2 <- ggplot(tips, aes(x = Day)) +\n    geom_bar() +\n    labs(x = \"Day of week\") +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\nplt3 <- ggplot(tips, aes(x = Server)) +\n    geom_bar()\n\nplt1 | plt2 | plt3\n\n\n\n\n\n\nRun install.packages(\"patchwork\") first in your R console\n\ntbl_credit <- tips %>%\n    count(Credit) %>%\n    mutate(perc = round((n / sum(n)) * 100, 2))\ntbl_credit\n\n# A tibble: 2 × 3\n  Credit     n  perc\n  <fct>  <int> <dbl>\n1 No       106  67.5\n2 Yes       51  32.5\n\n\n\ntbl_day <- tips %>%\n    count(Day) %>%\n    mutate(perc = round((n / sum(n)) * 100, 2))\ntbl_day\n\n# A tibble: 5 × 3\n  Day           n  perc\n  <fct>     <int> <dbl>\n1 Monday       20 12.7 \n2 Tuesday      13  8.28\n3 Wednesday    62 39.5 \n4 Thursday     36 22.9 \n5 Friday       26 16.6 \n\n\n\ntbl_server <- tips %>%\n    count(Server) %>%\n    mutate(perc = round((n / sum(n)) * 100, 2))\ntbl_server\n\n# A tibble: 3 × 3\n  Server     n  perc\n  <fct>  <int> <dbl>\n1 A         60  38.2\n2 B         65  41.4\n3 C         32  20.4\n\n\nYou can create nice tables with the kable command or the pander command:\n\nlibrary(kableExtra)\n\nkable(tbl_credit) %>% kable_styling(full_width = FALSE)\n\n\n\n\n Credit \n    n \n    perc \n  \n\n\n No \n    106 \n    67.52 \n  \n\n Yes \n    51 \n    32.48 \n  \n\n\n\nkable(tbl_day) %>% kable_styling(full_width = FALSE)\n\n\n\n\n Day \n    n \n    perc \n  \n\n\n Monday \n    20 \n    12.74 \n  \n\n Tuesday \n    13 \n    8.28 \n  \n\n Wednesday \n    62 \n    39.49 \n  \n\n Thursday \n    36 \n    22.93 \n  \n\n Friday \n    26 \n    16.56 \n  \n\n\n\nkable(tbl_server) %>% kable_styling(full_width = FALSE)\n\n\n\n\n Server \n    n \n    perc \n  \n\n\n A \n    60 \n    38.22 \n  \n\n B \n    65 \n    41.40 \n  \n\n C \n    32 \n    20.38 \n  \n\n\n\nkable(list(tbl_credit, tbl_day, tbl_server)) %>%\n    kable_styling()\n\n\n\n \n\n\n\n Credit \n    n \n    perc \n  \n\n\n No \n    106 \n    67.52 \n  \n\n Yes \n    51 \n    32.48 \n  \n\n\n\n    \n\n\n\n Day \n    n \n    perc \n  \n\n\n Monday \n    20 \n    12.74 \n  \n\n Tuesday \n    13 \n    8.28 \n  \n\n Wednesday \n    62 \n    39.49 \n  \n\n Thursday \n    36 \n    22.93 \n  \n\n Friday \n    26 \n    16.56 \n  \n\n\n\n    \n\n\n\n Server \n    n \n    perc \n  \n\n\n A \n    60 \n    38.22 \n  \n\n B \n    65 \n    41.40 \n  \n\n C \n    32 \n    20.38 \n  \n\n\n\n  \n\n\nFrom the univariate distribution (or marginal distribution) of each categorical variable we see that the most common payment method was not a credit card, and the most common day of the week to dine at that restaurant was wednesday. Finally, the most common server among the parties was B.\n\n\nThe most common value is the mode."
  },
  {
    "objectID": "1_02_categorical_data.html#student-glossary",
    "href": "1_02_categorical_data.html#student-glossary",
    "title": "Categorical data",
    "section": "\n3 Student Glossary",
    "text": "3 Student Glossary\nTo conclude the lab, add the new functions to the glossary of R functions that you started last week.\n\n\nFunction\nUse & Package\n\n\n\n%>%\n?\n\n\ngeom_bar\n?\n\n\ncount\n?\n\n\nmutate\n?\n\n\nsum\n?\n\n\nround\n?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Dr Umberto Noe\nDr Josiah King\nDr Emma Waterston\nDepartment of Psychology, The University of Edinburgh"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is the homepage of DAPR1 labs. Please use the navigation bar above to go to your week’s content."
  },
  {
    "objectID": "rd_1.html",
    "href": "rd_1.html",
    "title": "Getting started with R and RStudio",
    "section": "",
    "text": "Recommended option: access it via the RStudio server. Try these steps first to register for RStudio server online:\n\nLog in to EASE using your university UUN and password.\nSet your RStudio password here, the username will be the same as your UUN (make sure you type your UUN correctly).\nAccess the server from https://rstudio.ppls.ed.ac.uk using your university UUN and the password you set above in (2).\n\nIf the steps above did not work:\n\nPlease complete this form and wait for an email. Please note that this can take up to four working days.\n\nOnce you receive an email from us, please follow the following instructions:\n\nSet your here, the username will be the same as your UUN (make sure you type your UUN correctly).\nAccess the server from https://rstudio.ppls.ed.ac.uk using your university UUN and the password you just set above.\n\n\n\nAlternative: install it locally on your PC following these instructions.\n\n\nCreate a new folder on the server. Give it a useful name like the name of the course: DAPR1. (In the picture we have used “USMR” but please use “DAPR1”).\n\n\n\nIn the top right, click Project > New Project\n\n\n\nClick “Existing Directory”\n\n\n\nClick “Browse” and then choose the folder you just created. Click “Choose” and then click “Create Project”.\n\n\n\nYou should now be able to tell that you have the project open, because it shows you in the top right.\n\n\nYou’re ready to go!"
  },
  {
    "objectID": "rd_1.html#a-first-look-at-rstudio",
    "href": "rd_1.html#a-first-look-at-rstudio",
    "title": "Getting started with R and RStudio",
    "section": "\n2 A first look at RStudio",
    "text": "2 A first look at RStudio\nOkay, now you should have RStudio and a project open, and you should see something which looks more or less like the image below, where there are several little windows.\n\nWe are going to explore what each of these little windows offer by just diving in and starting to do things.\n\n2.1 R as a calculator\nStarting in the left-hand window, you’ll notice the blue sign > which is where we R code gets executed.\nType 2+2, and hit Enter ↵. You should discover that R is a calculator.\nLet’s work through some of the basic operations (adding, subtracting, etc). Try these commands yourself:\n\n2 + 5\n10 - 4\n2 * 5\n10 - (2 * 5)\n(10 - 2) * 5\n10 / 2\n\n3^2 (Hint, interpret the ^ symbol as “to the power of”)\n\n\n\n\n\n\n\nWhenever you see the blue sign >, it means R is ready and waiting for you to provide a command.\nIf you type 10 + and press Enter, you’ll see that instead of a blue > you are left with a blue +. This means that R is waiting for more. Either give it more, or cancel the command by pressing the escape key on your keyboard.\n\n\n\nAs well as performing calculations, we can ask R things, such as “Is 3 less than 5?”:\n\n3 < 5\n\n[1] TRUE\n\n\nAs the computation above returns TRUE, we notice that such questions return either TRUE or FALSE. These are not numbers and are called logical values.\nTry the following:\n\n\n3 > 5 “is 3 greater than 5?”\n\n3 <= 5 “is 3 less than or equal to 5?”\n\n3 >= 3 “is 3 greater than or equal to 3?”\n\n3 == 5 “is 3 equal to 5?”\n\n(2 * 5) == 10 “is 2 times 5 equal to 10?”\n\n(2 * 5) != 11 “is 2 times 5 NOT equal to 11?”\n\n2.2 R as a calculator with a memory\nWe can also store things in R’s memory, and to do that we just need to give them a name. Type x <- 5 and press Enter.\nWhat has happened? We’ve just stored something named x which has the value 5. We can now refer to the name and it will give us the value! Try typing x and hitting Enter. It should give you the number 5. What about x * 3?\n:::{.callout-info} #### Storing things in R\nThe <- symbol, pronounced arrow, is used to assign a value to a named object:\n[name] <- [value]\nNote, there are a few rules about names in R:\n\nNo spaces - spaces inside a name are not allowed (the spaces around the <- don’t matter):\n\n\nlucky_number <- 5 ✔   lucky number <- 5 ❌\n\n\n\nNames must start with a letter:\n\n\nlucky_number <- 5 ✔   1lucky_number <- 5 ❌\n\n\n\nCase sensitive:\n\n\nlucky_number is different from Lucky_Number\n\n\n\nReserved words - there is a set of words you can’t use as names, including: if, else, for, in, TRUE, FALSE, NULL, NA, NaN, function\n(Don’t worry about remembering these, R will tell you if you make the mistake of trying to name a variable after one of these).\n\nYou might have noticed that something else happened when you executed the code x <- 5. The thing we named x with a value of 5 suddenly appeared in the top-right window. This is known as the environment, and it shows everything that we store things in R:\n\nWe’ve now used a couple of the windows - we’ve been executing R code in the console, and learned about how we can store things in R’s memory (the environment) by assigning a name to them:\n\nNotice that in the screenshot above, we have moved the console down to the bottom-left, and introduced a new window above it. This is the one that we’re going to talk about next."
  },
  {
    "objectID": "rd_1.html#r-scripts-and-rmarkdown",
    "href": "rd_1.html#r-scripts-and-rmarkdown",
    "title": "Getting started with R and RStudio",
    "section": "\n3 R scripts and Rmarkdown",
    "text": "3 R scripts and Rmarkdown\nWhat if we want to edit our code? Whatever we write in the console just disappears upwards. What if we want to change things we did earlier on?\nWell, we can write and edit our code in a separate place before sending it to the console to be executed!!\n\n3.1 R scripts\n\n\n\n\n\n\nTask\n\n\n\n\nOpen an R script\n\nFile > New File > R script\n\n\nCopy and paste the following into the R script\n\n\nx <- 210\ny <- 15\nx / y\n\n\nPosition your text-cursor (blinking vertical line) on the top line and press:\n\nCtrl + Enter on Windows\nCmd + Enter on macOS\n\n\n\n\n\nNotice what has happened - it has sent the command x <- 210 to the console, where it has been executed, and x is now in your environment. Additionally, it has moved the text-cursor to the next line.\n\n\n\n\n\n\n\nTask\n\n\n\nPress Ctrl + Enter (Windows) or Cmd + Enter (macOS) again. Do it twice (this will run the next two lines).\nThen, change x to some other number in your R script, and run the lines again (starting at the top).\n\n\n\n\n\n\n\n\nTask\n\n\n\nAdd the following line to your R script and execute it (send it to the console pressing Ctrl/Cmd + Enter):\n\nplot(1,5)\n\n\n\nA very basic plot should have appeared in the bottom-right of RStudio. The bottom-right window actually does some other useful things.\n\n\n\n\n\n\nTask\n\n\n\n\nSave the R script you have been working with:\n\nFile > Save\ngive it an appropriate name, and click save.\n\n\nCheck that you can now see that file in the file pane, by clicking on the “Files” tab of the bottom-right window.\n\n\n\nNOTE: When you save R script files, they terminate with a .R extension.\n\n3.2 Rmarkdown\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\nIn addition to R scripts, there is another type of document we can create, known as an “Rmarkdown”.\nRmarkdown documents combine the analytical power of R and the utility of a text-processor. We can have one document which contains all of our analysis as well as our written text, and can be compiled into a nicely formatted report. This saves us doing analysis in R and copying results across to Microsoft Word. It ensures our report accurately reflects our analysis. Everything that you’re reading now has all been written in Rmarkdown!\nWe’re going to use Rmarkdown documents throughout this course. We’ll get into it how to write them lower down, but it basically involves writing normal text interspersed with “code-chunks” (i.e., chunks of code!). In the example below, you can see the grey boxes indicating the R code, with text in between. We can then compile the document into either a .pdf or a .html file."
  },
  {
    "objectID": "rd_1.html#recap",
    "href": "rd_1.html#recap",
    "title": "Getting started with R and RStudio",
    "section": "\n4 Recap",
    "text": "4 Recap\nOkay, so we’ve now seen all of the different windows in RStudio in action:\n\nThe console is where R code gets executed\nThe environment is R’s memory, you can assign something a name and store it here, and then refer to it by name in your code.\nThe editor is where you can write and edit R code and Rmarkdown documents. You can then send this to the console for it to be executed.\nThe bottom-right window shows you the plots that you create, the files in your project, and some other things (we’ll get to these later)."
  },
  {
    "objectID": "rd_1.html#take-a-breather",
    "href": "rd_1.html#take-a-breather",
    "title": "Getting started with R and RStudio",
    "section": "\n5 Take a breather",
    "text": "5 Take a breather\nBelow are a couple of our recommended settings for you to change as you begin your journey in R. After you’ve changed them, take a 5 minute break before moving on to learning about how we store data in R.\n\n\n\n\n\n\nUseful Settings 1: Clean environments\nAs you use R more, you will store lots of things with different names. Throughout this course alone, you’ll probably name hundreds of different things. This could quickly get messy within our project.\nWe can make it so that we have a clean environment each time you open RStudio. This will be really handy.\n\nIn the top menu, click Tools > Global Options…\n\nThen, untick the box for “Restore .RData into workspace at startup”, and change “Save workspace to .RData on exit” to Never:\n\n\n\n\n\n\n\n\n\n\n\nUseful Settings 2: Wrapping code\nIn the editor, you might end up with a line of code which is really long, but you can make RStudio ‘wrap’ the line, so that you can see it all, without having to scroll:\n\nx <- 1+2+3+6+3+45+8467+356+8565+34+34+657+6756+456+456+54+3+78+3+3476+8+4+67+456+567+3+34575+45+2+6+9+5+6\n\n\nIn the top menu, click Tools > Global Options…\n\nIn the left menu of the box, click “Code”\n\nTick the box for “Soft-wrap R source files”"
  },
  {
    "objectID": "rd_1.html#r-packages",
    "href": "rd_1.html#r-packages",
    "title": "Getting started with R and RStudio",
    "section": "\n6 R Packages",
    "text": "6 R Packages\n\n6.1 Installing R packages\nAlongside the basic installation of R and RStudio, there are many add-on packages which the R community create and maintain.\nThe thousands of packages are part of what makes R such a powerful and useful tool - there is a package for almost everything you could want to do in R.\n\n\n\n\n\n\nTask\n\n\n\nIn the console, type install.packages(\"cowsay\") and hit Enter.\nLots of red text will come up, and it will take a bit of time.\nWhen it has finished, and R is ready for you to use again, you will see the blue sign >.\n\n\n\n6.2 Using R packages\nIt’s not enough just to install a package - to actually use the package, we need to load it using library().\nWe install a package only once. But each time we open RStudio, we have to load the packages we need.\n\n\n\n\n\n\n\nTask\n\n\n\nIn the console again, type library(cowsay) and hit enter. This loads the package for us to use it.\nThen, type say(\"hello world\", by = \"cow\") and hit enter.\nHopefully you got a similar result to ours:\n\nlibrary(cowsay)\nsay(\"Hi Folks!\", by = \"cow\")\n\n\n ----- \nHi Folks! \n ------ \n    \\   ^__^ \n     \\  (oo)\\ ________ \n        (__)\\         )\\ /\\ \n             ||------w|\n             ||      ||"
  },
  {
    "objectID": "rd_1.html#your-first-.rmd-file",
    "href": "rd_1.html#your-first-.rmd-file",
    "title": "Getting started with R and RStudio",
    "section": "\n7 Your first .Rmd file",
    "text": "7 Your first .Rmd file\nIn order to be able to write and compile Rmarkdown documents (and do a whole load of other things which we are going to need throughout the course) we are now going to install a set of packages known collectively as the “tidyverse” (this includes the “rmarkdown” package).\n\n\nIf you installed R/Rstudio on your own computer, then in the console, type install.packages(\"tidyverse\") and hit Enter. You may have to wait a while.\n\nIf you are using rstudio.ppls.ed.ac.uk, then we have already installed “tidyverse” and a few other useful packages for you, so you don’t have to do anything!\n\n\n\n\n\n\n\nTask\n\n\n\nOpen a new Rmarkdown document: File > New File > R Markdown…\nWhen the box pops-up, give a title of your choice (“Intro lab”, maybe?) and your name as the author.\n\n\n\n7.1 Writing code in a .Rmd file\nThe file which you have just created will have some template stuff in it. Delete everything below the first code chunk to start with a fresh document:\n\n\n\n\n\n\n\nTask\n\n\n\nInsert a new code chunk by either using the Insert button in the top right of the document and selecting R, or by typing Ctrl + Alt + i on Windows or Option + Cmd + i on MacOS.\nInside the chunk, type:\nprint(\"Hello world! My name is ?\")\nTo execute the code inside the chunk, you can either:\n\ndo as you did in the R script - put the text-cursor on the first line, and hit Ctrl/Cmd + Enter to run the lines sequentially;\nclick the little green arrow at the top right of your code-chunk to run all of the code inside the chunk;\nwhile your cursor is inside the code chunk, press Cmd + Shift + Enter to run all of the code inside the chunk.\n\nYou can see that the output gets printed below.\n\n\n\nWe’re going to use some functions which are in the tidyverse package, which we already installed above (or which we installed for you on the server).\nTo use the package, we need to load it.\nWhen writing analysis code, we want it to be reproducible - we want to be able to give somebody else our code and the data, and ensure that they can get the same results. To do this, we need to show what packages we use.\nIt is good practice to load any packages you use at the top of your code, so that users of your code will know what packages they will need to install to run your code.\nIn your first code chunk, type:\n\n# I'm going to use these packages in this document:\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nand run the chunk.\nNOTE: You might get various messages popping up below when you run this chunk, that is fine.\nComments in code\nNote that using # in R code makes that line a comment, which basically means that R will ignore the line. Comments are useful for you to remind yourself of what your code is doing.\n\n7.2 Writing text in a .Rmd file\nPlace your cursor outside the code chunk, and below the code chunk add a new line with the following:\n# R code examples\nNote that when the # is used in a Rmarkdown file outside of a code-chunk, it will make that line a heading when we finally get to compiling the document. Below, what you see on the left will be compiled to look like those on the right:\n\n\n\n\n\n\n\nRECALL:\n\n\n\n\n\nInside a code-chunk, one or more #s will create a comment\n\n\nOutside a code-chunk, one ore more #s will create headings\n\n\n\n\nIn your Rmarkdown document, choose a few of the symbols below, and write an explanation of what it does, giving an example in a code chunk. You can see an example of the first few below.\n\n+\n-\n*\n/\n()\n^\n<-\n<\n>\n<=\n>=\n==\n!=\n\n\n\n7.3 Storing data into R\nWe’ve already seen how to assign a value to a name/symbol using <-. However, we’ve only seen how to assign a single number, e.g, x <- 5.\nTo store a sequence of numbers into R, we combine the values using the combine function c() and give the sequence a name. A sequence of elements all of the same type is called a vector. To view the stored content, simply type the name of the vector.\n\nmyfirstvector <- c(1, 5, 3, 7)\nmyfirstvector\n\n[1] 1 5 3 7\n\n\nWe can perform arithmetic operations on each value of the vector. For example, to add five to each entry:\n\nmyfirstvector + 5\n\n[1]  6 10  8 12\n\n\nRecall that vectors are sequences of elements all of the same type. They do not have to be always numbers; they could be words such as real or fictional animals. Words need to be written inside quotations, e.g. “anything”, and instead of being of numeric type, we say they are characters.\n\nwordsvector <- c(\"cat\", \"dog\", \"parrot\", \"peppapig\")\nwordsvector\n\n[1] \"cat\"      \"dog\"      \"parrot\"   \"peppapig\"\n\n\n\nNOTE\nYou can use either double-quote or single-quote:\n\nc(\"cat\", \"dog\", \"parrot\", \"peppapig\")\n\n[1] \"cat\"      \"dog\"      \"parrot\"   \"peppapig\"\n\nc('cat', 'dog', 'parrot', 'peppapig')\n\n[1] \"cat\"      \"dog\"      \"parrot\"   \"peppapig\"\n\n\n\nThe function class() will tell you the type of the object. In this case, it is a character vector.\n\nclass(wordsvector)\n\n[1] \"character\"\n\n\nIt does not make sense to add a number to words, hence some operations like addition and multiplication are only defined on vectors of numeric type. If you make a mistake, R will warn you with a red error message.\n\nwordsvector + 5\n\n\nError in wordsvector + 5 : non-numeric argument to binary operator\n\nFinally, it is important to notice that if you combine together in a vector a number and a word, R will transform all elements to be of the same type. Why? Recall: vectors are sequences of elements all of the same type. Typically, R chooses the most general type between the two. In this particular case, it would make everything a character, check the ““, as it would be harder to transform a word into a number!\n\nmysecondvector <- c(4, \"cat\")\nmysecondvector\n\n[1] \"4\"   \"cat\"\n\n\n\n7.4 Reading data into R\nWhile we can manually input data like we did above, more often, we will need to read in data which has been created elsewhere (like in excel, or by some software which is used to present participants with experiments).\n\n\n\n\n\n\nTask\n\n\n\nAdd a new heading by typing the following:\n# Reading and storing data\nRemember: We make headings using the # outside of a code chunk.\n\n\n\n\n\n\n\n\nTask\n\n\n\nOpen Microsoft Excel, or LibreOffice Calc, or whatever spreadsheet software you have available to you, and create some data with more than one variable.\nIt can be whatever you want, but we’ve used a very small example here for you to follow, so feel free to use it if you like.\nWe’ve got two sets of values here: the names and the birth-years of each member of the Beatles. The easiest way to think of this would be to have a row for each Beatle, and a column for each of name and birth-year.\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nSave the data as a .csv file.\nAlthough R can read data when it’s saved in Microsoft/LibreOffice formats, the simplest, and most universal way to save data is as simple text, with the values separated by some character - .csv stands for comma separated values.\nIn Microsoft Excel, if you go to File > Save as\nIn the Save as Type box, choose to save the file as CSV (Comma delimited).\nImportant: save your data in the project folder you created at the start of this lab.\n\n\nBack in RStudio…\nNext, we’re going to read the data into R. We can do this by using the read_csv() function, and directing it to the file you just saved.\nIf you are using RStudio on the server, you will need to upload the file you just saved to the server. The video below shows an example of this:\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nCreate a new code-chunk in your Rmarkdown and, in the chunk, type: read_csv(\"name-of-your-data.csv\"), where you replace name-of-your-data with whatever you just saved your data as in your spreadsheet software.\n\n\nHelpful tip\nIf you have your text-cursor inside the quotation marks, and press the tab key on your keyboard, it will show you the files inside your project. You can then use the arrow keys to choose between them and press Enter to add the code:\n\n\n\nWhen you run the line of code you just wrote, it will print out the data, but will not store it. To do that, we need to assign it as something:\n\n\nRows: 4 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): name\ndbl (1): birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nbeatles <- read_csv(\"data_from_excel.csv\")\n\nNote that this will now turn up in the Environment pane of RStudio.\nNow that we’ve got our data in R, we can print it out by simply invoking its name:\n\nbeatles\n\n# A tibble: 4 × 2\n  name   birth_year\n  <chr>       <dbl>\n1 John         1940\n2 Paul         1942\n3 George       1943\n4 Ringo        1940\n\n\nAnd we can do things such as ask R how many rows and columns there are:\n\ndim(beatles)\n\n[1] 4 2\n\n\nThis says that there are 4 members of the Beatles, and for each we have 2 measurements.\nTo get more insight into what the data actually are, you can either use the structure str() function, or glimpse() function to get a glimpse at the data:\n\nstr(beatles)\n\nspec_tbl_df [4 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ name      : chr [1:4] \"John\" \"Paul\" \"George\" \"Ringo\"\n $ birth_year: num [1:4] 1940 1942 1943 1940\n - attr(*, \"spec\")=\n  .. cols(\n  ..   name = col_character(),\n  ..   birth_year = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\nglimpse(beatles)\n\nRows: 4\nColumns: 2\n$ name       <chr> \"John\", \"Paul\", \"George\", \"Ringo\"\n$ birth_year <dbl> 1940, 1942, 1943, 1940\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse dim() to confirm how many rows and columns are in your data.\nUse str() or glimpse() to take a look at the structure of the data. Don’t worry about the output of str() right now, we’ll pick up with this in the next chapter.\n\n\n\n7.5 Getting help in R\ndim(), str(), read_csv() are all functions.\nFunctions perform specific operations / transformations in computer programming.\nThey can have inputs and outputs. For example, dim() takes some data you have stored in R as its input, and gives the dimensions of the data as its output.\nIn R, functions come with help pages, where you can see information about the various inputs and outputs, and examples of how to use them.\nIn the console, type ?dim (or ?dim() will work too) and press Enter.\nThe bottom-right pane (where things like plots are also shown), should switch to the Help tab, and open the documentation page for the dim() function!\n\n\n\n\n\n\nWhy did we ask you to write this bit in the console, whereas previously we’ve been writing stuff in the RMarkdown document in the editor?\nWell, when writing an RMarkdown document, the aim at the end is to have a nice document which we can read. For instance, we can write statistical reports, journal papers, coursework reports etc, in Rmarkdown. But the reader doesn’t need to see that we’re looking up how to use some function - just like they don’t need to know that we might look up a word in the dictionary before using it.\n\n\n\n\n7.6 Compiling a .Rmd file\n\n\n\n\n\n\nTask\n\n\n\nBy now, you should have an Rmardkown document (.Rmd) with your answers to the tasks we’ve been through today.\nCompile the document by clicking on the Knit button at the top (it will ask you to save your document first). The little arrow to the right of the Knit button allows you to compile to either .pdf or .html."
  },
  {
    "objectID": "rd_1.html#checklist-for-today",
    "href": "rd_1.html#checklist-for-today",
    "title": "Getting started with R and RStudio",
    "section": "\n8 Checklist for today",
    "text": "8 Checklist for today\n\n\nEITHER:\n\nOption A: Get started with the PPLS RStudio Server   ✔\nOption B: Install R and RStudio   ✔\n\n\nStart a new project for the course   ✔\nChange a few RStudio settings (recommended)   ✔\nInstall some R packages (the “tidyverse”)   ✔\nCreate a new Rmarkdown document   ✔\nComplete today’s tasks and exercises on storing data in R   ✔\nCompile your Rmarkdown document   ✔\nCelebrate!   ✔ 🎉"
  },
  {
    "objectID": "rd_1.html#glossary",
    "href": "rd_1.html#glossary",
    "title": "Getting started with R and RStudio",
    "section": "\n9 Glossary",
    "text": "9 Glossary\n\nConsole: where the code gets executed\nEnvironment: R’s memory, it lists all the names of things with stuff stored into them\nEditor: where we edit code\nR script: a file with R code and comments\nRmarkdown document: an enhanced file where you can combine together R code, explanatory text, and plots.\npackages (also library): user-created bundles providing additional functionality to your local R installation\nfunctions: they take inputs, do some transformation or computation on them, and return a result (output)\n?: returns the help page of a function, e.g. ?dim.\n\n\n\n\n\n\n\n\nSymbol\nDescription\nExample\n\n\n\n+\nAdds two numbers together\n\n2+2 - two plus two\n\n\n-\nSubtract one number from another\n\n3-1 - three minus one\n\n\n*\nMultiply two numbers together\n\n3*3 - three times three\n\n\n/\nDivide one number by another\n\n9/3 - nine divided by three\n\n\n()\ngroup operations together\n\n(2+2)/4 is different from 2+2/4\n\n\n\n^\nto the power of..\n\n4^2 - four to the power of two, or four squared\n\n\n<-\nstores an object in R with the left hand side (LHS) as the name, and the RHS as the value\nx <- 10\n\n\n=\nstores an object in R with the left hand side (LHS) as the name, and the RHS as the value\nx = 10\n\n\n<\nis less than?\n2 < 3\n\n\n>\nis greater than?\n2 > 3\n\n\n<=\nis less than or equal to?\n2 <= 3\n\n\n>=\nis greater than or equal to?\n2 >= 2\n\n\n==\nis equal to?\n(5+5) == 10\n\n\n!=\nis not equal to?\n(2+3) != 4\n\n\nc()\ncombines values into a vector (a sequence of values)\nc(1,2,3,4)"
  }
]