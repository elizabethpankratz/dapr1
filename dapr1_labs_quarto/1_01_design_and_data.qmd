---
title: "Research design & data"
subtitle: "Semester 1 - Week 1"
---


```{r setup}
#| include: false

source('assets/setup.R')
```


## Getting started

::: {.callout-warning}
### Did you register for RStudio Online?

__If yes:__

You can move on to the next tip.

__If not, try this first:__

1. Log in to EASE <https://www.ease.ed.ac.uk/> using your university UUN and password.  
2. _If you haven't done it before:_ set your RStudio password here <https://rstudio.ppls.ed.ac.uk/setpass.php>, the username will be the same as your UUN (make sure you type your UUN correctly).  
3. Access the server from <https://rstudio.ppls.ed.ac.uk>.


__If that didn't work:__

Fill out [this form](https://forms.office.com/Pages/ResponsePage.aspx?id=sAafLmkWiUWHiRCgaTTcYTstBwJEBklLhOSskzRST95UMTFKQlo5NkdOS0RNRTVXQjZLWloyU1RPQS4u) to be added to the server, and wait for an email from us. This can take up to 3 working days.
:::

::: {.callout-warning}
### Lab instructions

- Please work through the lab exercises in groups of 4 students.
- Open an Rmd file, and start writing your answers in there.
- You will be given some data that you will use throughout the next 5 weeks to produce a data analysis report on those data.  
- In week 5, you will be asked to write up your explorations and produce a report in PDF format, which you will show to tutors in week 6 and receive formative feedback.
:::

::: {.callout-warning}
### Lab help & support
The lab is structured to provide various levels of support. When attending the labs, you should directly attempt and work on the tasks. However, if you are unsure or stuck at any point, you can make use of the following help:

- Simply raise your hand and get help from a tutor
- Hover your mouse on the superscript number to get a hint. The hints may sometimes show multiple equivalent ways of getting an answer - you just need one way
- Scroll down to the Worked Example section, where you can read through a worked example.
:::

::: {.callout-warning}
### Install tinytex

Before you begin, make sure you have `tinytex` installed in R so that you can "Knit" your Rmd document to a PDF file:

```{r}
#| eval: false
install.packages("tinytex")
tinytex::install_tinytex()
```
:::


## Formative report A

In the first five weeks of the course you should produce a PDF report using Rmarkdown for which you will receive formative feedback in week 6. Throughout those weeks, you will be working with a simulated dataset arising from a lexical decision task, adapted from @nordmann2022.

The report should not include any reference to R code or functions, but be written or a generic reader who is only assumed to have a basic statistical understanding without any R knowledge. You should also avoid any R code output or printout in the PDF file.


### Data

**Lexical Decision Task**.  One hundred participants were asked to decide whether a presented word was a real word or a non-word. The data include 100 rows (one for each participant) and 7 variables:

```{r, echo=F}
require(tidyverse)
tribble(
    ~'Variable Name', ~'Description',
    'id', 'Participant ID',
    'age', 'Age',
    'language', 'Language group (1 = monolingual, 2 = bilingual)',
    'rt_word', 'Reaction time (ms) for word trials',
    'rt_nonword', 'Reaction time (ms) for non-word trials',
    'acc_word', 'Accuracy for word trials',
    'acc_nonword', 'Accuracy for non-word trials'
) %>% 
    knitr::kable()
```

You can download the data from this link: <https://uoepsy.github.io/data/ldt_data.csv>.


### Tasks

For formative report A, you will be asked to perform the following tasks, each related to a week of teaching in this course:

:::{.callout-note}
### This week's task

A1) Read the data into R and inspect it  
:::

A2) Display and describe the categorical data  
A3) Display and describe the numerical data  
A4) Display and describe a relationship of interest between two or three variables of your choice

__This week you will only focus on task A1.__ Below there are some guided sub-steps you may want to consider to complete task A1.


### A1 sub-tasks

:::{.callout-note}
To see the hints, hover your cursor on the superscript numbers.
:::

- Read the lexical decision task data into R and inspect at the data. By inspect, we literally mean to look at the data in RStudio. You don't need to show the full data in the report.^[
Hint: `View(<dataset name>)` or `head(<dataset name>)`
]

- How many observations are there?^[
Hint: `nrow(<dataset name>)` or `dim(<dataset name>)[1]`
]

- How many variables are there?^[
Hint: `ncol(<dataset name>)` or `dim(<dataset name>)[2]`
]

- What is the type of each variable?^[
Hint: `glimpse(<dataset name>)` from `tidyverse`, or `str(<dataset name>)`, or `sapply(<dataset name>, data.class)`
]
  
::: {.callout-caution collapse="true"}
### Think about it

What does `dim(<dataset name>)` return instead?  
What is the function of appending a `[1]` or `[2]`?
:::

- What's the minimum and maximum age in the sample? What about the average age?^[
Hint: `summary(<data>)`, `min(<data>)`, `max(<data>)`, `mean(<data>)`
]

- Do you notice any issues with the ages? Look at your data and come up with a possible reason why the results are strange.^[
Can age be negative? What may that value indicate?  
Are there possibly mistyped values?
]

- The `language` variable appears to contain numbers. Do those numbers correspond to an amount or an attribute? Convert that variable to the appropriate type and provide more descriptive labels.^[
Hint: Sometimes numbers just represent categories and it wouldn't make sense to perform mathematical operations on those labels, e.g. compute a mean. In this particular case 1 = monolingual, 2 = bilingual. The function `factor(<variable>, levels = ..., labels = ...)` lets you specify the current levels and assign each a more informative word label. Remember, you combine different values with the `c()` function, e.g. `c("a", "b")`.
]


<!-- Some code -->

```{r, echo=FALSE, eval=FALSE}
library(tidyverse)
lex_dec <- read_csv("https://uoepsy.github.io/data/ldt_data.csv")
head(lex_dec)
nrow(lex_dec)
ncol(lex_dec)
glimpse(lex_dec)
summary(lex_dec)
lex_dec$age[lex_dec$age == -99] <- NA
lex_dec$age[lex_dec$age == 555] <- NA
summary(lex_dec)

lex_dec$language <- factor(lex_dec$language, 
                           levels = c(1, 2),
                           labels = c('monolingual', 'bilingual'))
glimpse(lex_dec)
summary(lex_dec)
```

<!-- End -->



## Worked example

Consider the dataset available at <https://uoepsy.github.io/data/RestaurantTips.csv>, containing 157 observations on the following 7 variables:

```{r, echo=FALSE}
tribble(
    ~'Variable Name', ~'Description',
    'Bill', 'Size of the bill (in dollars)',
    'Tip', 'Size of the tip (in dollars)',
    'Credit', 'Paid with a credit card? n or y',
    'Guests', 'Number of people in the group',
    'Day', 'Day of the week: m=Monday, t=Tuesday, w=Wednesday, th=Thursday, or f=Friday',
    'Server', 'Code for specific waiter/waitress: A, B, or C',
    'PctTip', 'Tip as a percentage of the bill'
) %>%
    knitr::kable()
```

These data were collected by the owner of a bistro in the US, who was interested in understanding the tipping patterns of their customers. The data are adapted from @lock2020.

```{r}
library(tidyverse)  # we use read_csv and glimpse from tidyverse
```

```{r}
tips <- read_csv("https://uoepsy.github.io/data/RestaurantTips.csv")
head(tips)
```

:::{.column-margin}
`head()` shows by default the top 6 rows of the data. Use the `n = ...` option, e.g. `head(<data>, n = 10)` to change the default behaviour.
:::

```{r}
dim(tips)
```

:::{.column-margin}
This returns the number of rows and columns
:::

```{r}
glimpse(tips)
```

:::{.column-margin}
`glimpse` is part of the tidyverse package
:::


::: {.callout-note collapse="true"}
### Alternative

Alternatives to glimpse are the data "structure" function:

```{r}
str(tips)
```

or:

```{r}
sapply(tips, data.class)
```
:::

::: {.callout-tip}
### Example writeup
The data contains measurements for a total of 157 parties on four numeric variables: size of the bill (in dollars), size of the tip, number of guests in the group, and tip as a percentage of the bill total. The data also includes three categorical variables indicating whether or not the party paid with a credit card, the day of the week, as well as a server-specific identifier.
:::


```{r}
summary(tips)
```

:::{.column-margin}
`summary` returns a quick summary of the data. 
:::

You probably won't understand some parts of the output above, but we will learn more in the coming weeks, so don't worry too much about it. For the moment, you should be able to understand the minimum, maximum, and the mean.  
Currently, it is not showing very informative output for the categorical variables. 

We can replace each factor level with a clearer label:

```{r}
tips$Day <- factor(tips$Day, 
                   levels = c("m", "t", "w", "th", "f"),
                   labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))

tips$Credit <- factor(tips$Credit, 
                      levels = c("n", "y"),
                      labels = c("No", "Yes"))

tips$Server <- factor(tips$Server)
```


::: {.callout-note collapse="true"}
### Alternative

Using tidyverse:

```{r eval=FALSE}
tips <- tips %>%
    mutate(
        Day = factor(Day,
                     levels = c("m", "t", "w", "th", "f"),
                     labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")),
        Credit = factor(Credit,
                        levels = c("n", "y"),
                        labels = c("No", "Yes")),
        Server = factor(Server)
    )
```

The functions `%>%` and `mutate` are part of the `tidyverse` package. The former, `%>%`, is called __pipe__.
:::


Let's check the result of the changes to the variable types:

```{r}
glimpse(tips)
```

```{r}
summary(tips)
```

:::{.column-margin}
After making categorical variables factors, `summary` shows the count of each category for the categorical variables.
:::

The percentage of total bill has a maximum value of 221, which seems very strange. Someone is very unlikely to tip more than their bill total. In this case 221% of their bill value seems unlikely.

Let's inspect the row where `PctTip` is greater than 100:

```{r}
tips[tips$PctTip > 100, ]
```


::: {.callout-note collapse="true"}
## Alternative

Alternatively, using tidyverse:
```{r}
tips %>% 
    filter(PctTip > 100)
```
:::


With a bill of 49.59, the tip would be 109.59 dollars:

```{r}
49.59 * 221 / 100
```

Furthermore, we also notice that the tipping amount is not available (NA). The corresponding value in the percentage of total tip seems likely an inputting error, perhaps due to double typing the leading 2 when recording the data. We will set that value to not available (NA) with the following code:

```{r}
tips$PctTip[tips$PctTip > 100] <- NA
```

::: {.column-margin}
`a > b` tests whether a is greater than b. `a < b` tests whether a is smaller than b. `a == b` tests whether a is equal to b; notice the double equal sign! You can also use `>=` or `<=`
:::


::: {.callout-note collapse="true"}
### Alternative

Alternatively you can use tidyverse:

```{r, eval=FALSE}
tips <- tips %>%
    mutate(
        PctTip = ifelse(PctTip > 100, NA, PctTip)
    )
```
:::


```{r}
summary(tips)
```


:::{.callout-tip}
### Example writeup
The average bill size was \$22.73, and the average tip was \$3.85, corresponding to roughly 17% of the total bill. Out of 157 parties, only 51 paid with a credit card. Most parties tended to be of around 2 people each, and people tended to go to that restaurant more often on Wednesday. Among the three servers, server C was the one that served the least number of parties.
The data also included a missing tipping value, corresponding to a bill $49.59, and a data inputting error for the corresponding measure of the tip as a percentage of the total bill.
:::


## Student Glossary

To conclude the lab, create a glossary of R functions. You can do so by opening Microsoft Word, Excel, or OneNote and creating a table with two columns: one where you should write the name of an R function, and the other column where you should provide a brief description of what the function does.

This "do it yourself" glossary is an opportunity for you to revise what you have learned in today's lab and write down a few take-home messages. You will find this glossary handy as a reference to keep next to you when you will be doing the assessed weekly quizzes.

Below you can find an example to get you started:

| Function   | Use & Package |
|:-----------|:--------------|
| `read_csv` | For reading comma separated value files. Part of tidyverse package |
| `View`     | ?   |
| `head`     | ?   |
| `nrow`      | ?   |
| `ncol`     | ?   |
| `dim`      | ?   |
| `glimpse`     | ?   |
| `str`     | ?   |
| `summary`     | ?   |
| `factor`     | ?   |
