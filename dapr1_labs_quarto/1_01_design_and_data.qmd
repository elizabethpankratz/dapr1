---
title: "Research design & data"
subtitle: "Semester 1 - Week 1"
callout-appearance: simple
---

```{r setup}
#| include: false

source('assets/setup.R')
```

## Getting started


::: {.callout-tip collapse="false"}
### Tip: Lab instructions

- Please work through the lab exercises in small groups of 3 to 5 students.
- You will be given some data that you will use throughout the next 5 weeks.  
- As a group, you have to produce a data analysis PDF report on those data.  
- In week 5, you will be asked to submit the PDF report, for which you will receive formative feedback in week 6.
- One person is the driver, responsible for typing on the PC, and the rest are navigators and cannot type. Navigators are responsible for commenting on the strategy, code, and spotting typos or fixing errors. Each week you will rotate so that everyone experiences being a driver.
- Driver: open an Rmd file, and start writing your work there.  
- Navigators: be alert and start providing suggestions and comments on the strategy and code.

**Format**

- PDF file, max 4 sides of A4 paper, keep the default settings in terms of Rmd knitting font and page margins. 
- Appendix with all the code in a code chunk with the option `results='hide'`.

:::


::: {.callout-tip collapse="true"}
### Tip: Lab help and support
The lab is structured to provide various levels of support. When attending the labs, you should directly attempt and work on the tasks. However, if you are unsure or stuck at any point, you can make use of the following help:

- Simply raise your hand and get help from a tutor
- Hover your mouse on the superscript number to get a hint. The hints may sometimes show multiple equivalent ways of getting an answer - you just need one way
- Scroll down to the Worked Example section, where you can read through a worked example.
:::

::: {.callout-caution collapse="true"}
### Caution: Did you register for RStudio Server Online?

::: {.panel-tabset}

#### A. Yes

- Login to [EASE](https://www.ease.ed.ac.uk/) using your university UUN and password.
- Access the server from <https://rstudio.ppls.ed.ac.uk> using your university UUN and RStudio password.

#### B. No

Try these steps first to register for RStudio server online:

- Log in to [EASE](https://www.ease.ed.ac.uk/) using your university UUN and password.
- Set your RStudio password [here](https://rstudio.ppls.ed.ac.uk/setpass.php), the username will be the same as your UUN (make sure you type your UUN correctly).
- Access the server from <https://rstudio.ppls.ed.ac.uk> using your university UUN and the password you set above in (2).

#### No, and B didn't work

- Please complete [this form](https://forms.office.com/r/Pc5aqhyveE) and wait for an email. Please note that this can take up to four working days. 

- Once you receive an email from us, please follow the following instructions:
    
    + Set your [here](https://rstudio.ppls.ed.ac.uk/setpass.php), the username will be the same as your UUN (make sure you type your UUN correctly).
    + Access the server from <https://rstudio.ppls.ed.ac.uk> using your university UUN and the password you just set above.

:::
:::

::: {.callout-important collapse="true"}
### Important: Install tinytex

Before you begin, make sure you have `tinytex` installed in R so that you can "Knit" your Rmd document to a PDF file:

```{r}
#| eval: false
install.packages("tinytex")
tinytex::install_tinytex()
```
:::


## Formative report A

In the first five weeks of the course you should produce a PDF report using Rmarkdown for which you will receive formative feedback in week 6. 
The report should not include any reference to R code or functions, but be written or a generic reader who is only assumed to have a basic statistical understanding without any R knowledge. You should also avoid any R code output or printout in the PDF file.

:::{.callout-tip collapse="true"}
### Hiding R code or ouput

:::{.panel-tabset}
#### Hiding R code

To not show the code of an R code chunk, and only show the output, write:

````
```{{r, echo=FALSE}}
# code goes here
```
````

#### Hiding R output

To show the code of an R code chunk, but hide the output, write:

````
```{{r, results='hide'}}
# code goes here
```
````

#### Hiding R code and output

To hide both code and output of an R code chunk, write:

````
```{{r, include=FALSE}}
# code goes here
```
````
:::
:::


### Data

**Hollywood Movies**. At the link <https://uoepsy.github.io/data/hollywood_movies_subset.csv> you will find data on Hollywood movies released between 2012 and 2018 from the top 5 lead studios and top 10 genres. The following variables were recorded:

- `Movie`: Title of the movie 
- `LeadStudio`: Primary U.S. distributor of the movie 
- `RottenTomatoes`: Rotten Tomatoes rating (critics) 
- `AudienceScore`: Audience rating (via Rotten Tomatoes) 
- `Genre`: One of Action Adventure, Black Comedy, Comedy, Concert, Documentary, Drama, Horror, Musical, Romantic Comedy, Thriller, or Western 
- `TheatersOpenWeek`: Number of screens for opening weekend 
- `OpeningWeekend`: Opening weekend gross (in millions) 
- `BOAvgOpenWeekend`: Average box office income per theater, opening weekend 
- `Budget`: Production budget (in millions) 
- `DomesticGross`: Gross income for domestic (U.S.) viewers (in millions) 
- `WorldGross`: Gross income for all viewers (in millions) 
- `ForeignGross`: Gross income for foreign viewers (in millions) 
- `Profitability`: WorldGross as a percentage of Budget 
- `OpenProfit`: Percentage of budget recovered on opening weekend 
- `Year`: Year the movie was released
- `IQ1`-`IQ50`: IQ score of each of 50 audience raters
- `Snacks`: How many of the 50 audience raters brought snacks
- `PrivateTransport`: How many of the 50 audience raters reached the cinema via private transportation


:::{.callout-important}
For formative report A, please only focus on the variables `Movie` to `Year`, ignoring anything beyond that. 
In other words, do not analyse the variables `IQ1` to `PrivateTransport` in the next five weeks of the course. We will use those later in the course.
:::

### Tasks

For formative report A, you will be asked to perform the following tasks, each related to a week of teaching in this course:

:::{.callout-note}
### Note: This week's task

A1) Read the data into R and inspect it  
:::

A2) Display and describe the categorical data  
A3) Display and describe the numerical data  
A4) Display and describe a relationship of interest between two or three variables of your choice  
A5) Finish the report write-up, knit to PDF, and submit the PDF for formative feedback

__This week you will only focus on task A1.__ Below there are some guided sub-steps you may want to consider to complete task A1.


### A1 sub-tasks

:::{.callout-tip}
To see the hints, hover your cursor on the superscript numbers.
:::

- Read the movie data into R, and give it a useful name. Inspect the data by looking at the data in RStudio. By viewing, we actually mean looking at the data either on the viewer or the console.^[
Hint: `View(DATA)` <br>
or `head(DATA)`
]

- How many observations are there?^[
Hint: `nrow(DATA)` <br>
or `dim(DATA)[1]`
]

- How many variables are there?^[
Hint: `ncol(DATA)` <br>
or `dim(DATA)[2]`
]

- What is the type of each variable?^[
Hint: `glimpse(DATA)` from `tidyverse`<br>
or `str(DATA)`<br>
or `sapply(DATA, data.class)`
]
  
::: {.callout-caution collapse="true"}
### Think about it

- What does `dim(DATA)` return?
- What is the function of appending a `[1]` or `[2]`?
:::

- What's the minimum and maximum budget in the sample? What about the average Rotten Tomatoes rating?^[
Hint: `summary(DATA)`<br>
or `min(DATA$VARIABLE)` and `max(DATA$VARIABLE)`<br>
Hint: `mean(DATA$VARIABLE)`
]

- Do you notice any issues when computing the minimum and maximum Budget and the average RottenTomatoes rating?^[
For some movies, data on the budget or rotten tomatoes rating are not available (NA). These are also called missing values.  
If you used the functions `min()`, `max()`, `mean()` you will get NA as a result. This is because if a value is missing, you cannot compute the mean of something you don't know. For example, what is the mean of 5, 10, and NA? How would I compute (5 + 10 + NA) / 3? I don't know, so it remains NA.  
You can tell R to ignore the missing values by saying `min(DATA$VARIABLE, na.rm = TRUE)` and similarly for `max` and `mean`.  
Instead, `summary()` does this for you automatically and immediately tells you if a variable had any NAs and how many.
]

- What is the range (i.e. minimum and maximum) of the variables in the data? What about the proportion of missing values for each variable?^[
Hint: `summary(DATA)` and `nrow(DATA)`
]

- Write-up a description of the dataset for the reader. You don't need to show the actual data in the report, but a description in words is sufficient for the reader.


<!-- Some code -->

```{r, echo=FALSE, eval=FALSE}
library(tidyverse)
movies <- read_csv("https://uoepsy.github.io/data/hollywood_movies_subset.csv")
head(movies)
nrow(movies)
ncol(movies)
dim(movies)
glimpse(movies)
summary(movies)

movies %>%
    select(Movie, RottenTomatoes, Budget) %>%
    filter(is.na(RottenTomatoes) | is.na(Budget))
```

<!-- End -->



## Worked example

Consider the dataset available at <https://uoepsy.github.io/data/RestaurantTips.csv>, containing 157 observations on the following 7 variables:

```{r, echo=FALSE}
library(tidyverse)
tribble(
    ~'Variable Name', ~'Description',
    'Bill', 'Size of the bill (in dollars)',
    'Tip', 'Size of the tip (in dollars)',
    'Credit', 'Paid with a credit card? n or y',
    'Guests', 'Number of people in the group',
    'Day', 'Day of the week: m=Monday, t=Tuesday, w=Wednesday, th=Thursday, or f=Friday',
    'Server', 'Code for specific waiter/waitress: A, B, or C',
    'PctTip', 'Tip as a percentage of the bill'
) %>%
    knitr::kable()
```

These data were collected by the owner of a bistro in the US, who was interested in understanding the tipping patterns of their customers. The data are adapted from @lock2020.

```{r}
library(tidyverse)  # we use read_csv and glimpse from tidyverse
```

```{r}
tips <- read_csv("https://uoepsy.github.io/data/RestaurantTips.csv")
head(tips)
```

:::{.column-margin}
`head()` shows by default the top 6 rows of the data. Use the `n = ...` option to change the default behaviour, e.g. `head(<data>, n = 10)`.
:::

```{r}
dim(tips)
```

:::{.column-margin}
This returns the number of rows and columns
:::

```{r}
glimpse(tips)
```

:::{.column-margin}
`glimpse` is part of the tidyverse package
:::


::: {.callout-note collapse="true"}
### Alternative

Alternatives to glimpse are the data "structure" function:

```{r}
str(tips)
```

or:

```{r}
sapply(tips, data.class)
```
:::

::: {.callout-tip}
### Example writeup
A dataset containing records on 7 variables related to tipping was obtained from <https://uoepsy.github.io/data/RestaurantTips.csv>, and was provided by the owner of a bistro in the US interested in studying which factors affected the tipping behaviour of the bistro's customers.
The data contains measurements for a total of 157 parties on four numeric variables: size of the bill (in dollars), size of the tip, number of guests in the group, and tip as a percentage of the bill total. The data also includes three categorical variables indicating whether or not the party paid with a credit card, the day of the week, as well as a server-specific identifier.
:::


```{r}
summary(tips)
```

:::{.column-margin}
`summary` returns a quick summary of the data. 
:::

You probably won't understand some parts of the output above, but we will learn more in the coming weeks, so don't worry too much about it. For the moment, you should be able to understand the minimum, maximum, and the mean.  
Currently, it is not showing very informative output for the categorical variables. 

We can replace each factor level with a clearer label:

```{r}
tips$Day <- factor(tips$Day, 
                   levels = c("m", "t", "w", "th", "f"),
                   labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))

tips$Credit <- factor(tips$Credit, 
                      levels = c("n", "y"),
                      labels = c("No", "Yes"))

tips$Server <- factor(tips$Server)
```


::: {.callout-note collapse="true"}
### Alternative

Using tidyverse, the function `mutate` is used to mutate a variable (column) in the data:

```{r eval=FALSE}
tips <- tips %>%
    mutate(
        Day = factor(Day,
                     levels = c("m", "t", "w", "th", "f"),
                     labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")),
        Credit = factor(Credit,
                        levels = c("n", "y"),
                        labels = c("No", "Yes")),
        Server = factor(Server)
    )
```

The functions `%>%` and `mutate` are part of the `tidyverse` package. The former, `%>%`, is called __pipe__.

The pipe works by taking what's on the left and passing it to the operation on the right. For example, rounding to 2 decimal places the logarithm of the whole numbers from 1 to 10:

```{r}
round(log(1:10), digits = 2)
```

is equivalent to:

```{r}
1:10 %>%
    log() %>%
    round(digits = 2)
```

:::


Let's check the result of the changes to the variable types:

```{r}
glimpse(tips)
```

```{r}
summary(tips)
```

:::{.column-margin}
After making categorical variables factors, `summary` shows the count of each category for the categorical variables.
:::

The percentage of total bill has a maximum value of 221, which seems very strange. Someone is very unlikely to tip more than their bill total. In this case 221% of their bill value seems unlikely.

Let's inspect the row where `PctTip` is greater than 100:

```{r}
tips[tips$PctTip > 100, ]
```


::: {.callout-note collapse="true"}
## Alternative

Alternatively, using tidyverse, the function `filter` is used to only filter the rows that satisfy a condition:

```{r}
tips %>% 
    filter(PctTip > 100)
```
:::


With a bill of 49.59, the tip would be 109.59 dollars:

```{r}
49.59 * 221 / 100
```

Furthermore, we also notice that the tipping amount is not available (NA). The corresponding value in the percentage of total tip seems likely an inputting error, perhaps due to double typing the leading 2 when recording the data. We will set that value to not available (NA) with the following code:

```{r}
tips$PctTip[tips$PctTip > 100] <- NA
```

::: {.column-margin}
`a > b` tests whether a is greater than b. `a < b` tests whether a is smaller than b. `a == b` tests whether a is equal to b; notice the double equal sign! You can also use `>=` or `<=`
:::


::: {.callout-note collapse="true"}
### Alternative

Alternatively you can use tidyverse:

```{r, eval=FALSE}
tips <- tips %>%
    mutate(
        PctTip = ifelse(PctTip > 100, NA, PctTip)
    )
```

Where the function `ifelse` selects a value depending on a condition to test: `ifelse(test, value_if_true, value_if_false)`. In the case above, each value in the column PctTip is replaced by NA if Pct > 100, and it is kept the same otherwise.

:::


```{r}
summary(tips)
```


:::{.callout-tip}
### Example writeup
The average bill size was \$22.73, and the average tip was \$3.85, corresponding to roughly 17% of the total bill. Out of 157 parties, only 51 paid with a credit card. Most parties tended to be of around 2 people each, and people tended to go to that restaurant more often on Wednesday. Among the three servers, server C was the one that served the least number of parties.
The data also included a missing tipping value, corresponding to a bill $49.59, and a data inputting error for the corresponding measure of the tip as a percentage of the total bill.
:::


## Student Glossary

To conclude the lab, create a glossary of R functions. You can do so by opening Microsoft Word, Excel, or OneNote and creating a table with two columns: one where you should write the name of an R function, and the other column where you should provide a brief description of what the function does.

This "do it yourself" glossary is an opportunity for you to revise what you have learned in today's lab and write down a few take-home messages. You will find this glossary handy as a reference to keep next to you when you will be doing the assessed weekly quizzes.

Below you can find an example to get you started:

| Function   | Use and Package |
|:-----------|:--------------|
| `read_csv` | For reading comma separated value files. Part of tidyverse package |
| `View`     | ?   |
| `head`     | ?   |
| `nrow`      | ?   |
| `ncol`     | ?   |
| `dim`      | ?   |
| `glimpse`     | ?   |
| `str`     | ?   |
| `summary`     | ?   |
| `factor`     | ?   |
